#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –≤ Finder Sidebar –Ω–∞ macOS
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def add_to_finder_sidebar(folder_path):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–ø–∫—É –≤ Finder Sidebar –∏—Å–ø–æ–ª—å–∑—É—è mysides —É—Ç–∏–ª–∏—Ç—É
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(folder_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å '{folder_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    abs_path = os.path.abspath(folder_path)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ mysides
        result = subprocess.run(['which', 'mysides'], capture_output=True, text=True)
        if result.returncode == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ sidebar –∏—Å–ø–æ–ª—å–∑—É—è mysides
            result = subprocess.run(
                ['mysides', 'add', os.path.basename(abs_path), f'file://{abs_path}'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print(f"‚úÖ –ü–∞–ø–∫–∞ '{abs_path}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Finder Sidebar")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ mysides: {result.stderr}")
                # Fallback –∫ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–∞–º
                return add_via_python_api(abs_path)
        else:
            print("‚ÑπÔ∏è  mysides –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
            return add_via_python_api(abs_path)
            
    except FileNotFoundError:
        print("‚ÑπÔ∏è  mysides –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Python API...")
        return add_via_python_api(abs_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return add_via_python_api(abs_path)


def add_via_python_api(abs_path):
    """
    Fallback –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Python API
    """
    try:
        import Foundation
        from Foundation import NSURL
        
        # –°–æ–∑–¥–∞–µ–º URL –∏–∑ –ø—É—Ç–∏
        url = NSURL.fileURLWithPath_(abs_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ SharedFileList –¥–ª—è Sidebar
        from LaunchServices import LSSharedFileListCreate, kLSSharedFileListFavoriteItems, LSSharedFileListInsertItemURL
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_list = LSSharedFileListCreate(None, kLSSharedFileListFavoriteItems, None)
        
        if favorite_list:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            LSSharedFileListInsertItemURL(favorite_list, None, None, None, url, None, None)
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{abs_path}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Sidebar —á–µ—Ä–µ–∑ Python API")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            return False
            
    except ImportError:
        print("‚ùå PyObjC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AppleScript...")
        return add_via_simple_applescript(abs_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python API: {e}")
        return add_via_simple_applescript(abs_path)


def add_via_simple_applescript(abs_path):
    """
    –ü—Ä–æ—Å—Ç–æ–π AppleScript –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    """
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –≤ base64 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        import base64
        encoded_path = base64.b64encode(abs_path.encode('utf-8')).decode('ascii')
        
        applescript = f'''
        set encodedPath to "{encoded_path}"
        set decodedPath to do shell script "echo " & quoted form of encodedPath & " | base64 -d"
        
        tell application "Finder"
            try
                set targetPath to POSIX file decodedPath
                make new favorite item at end of sidebar preferences with properties {{target:targetPath}}
                return "success"
            on error
                return "error"
            end try
        end tell
        '''
        
        result = subprocess.run(
            ['osascript', '-e', applescript],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0 and "success" in result.stdout:
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{abs_path}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Sidebar")
            return True
        else:
            print(f"‚ùå AppleScript –æ—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def remove_from_finder_sidebar(folder_path):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ Finder Sidebar –∏—Å–ø–æ–ª—å–∑—É—è AppleScript
    """
    abs_path = os.path.abspath(folder_path)
    
    applescript = f'''
    tell application "Finder"
        try
            set sidebarItems to every item of sidebar preferences
            repeat with anItem in sidebarItems
                if (target of anItem as string) contains "{abs_path}" then
                    delete anItem
                    return "success"
                end if
            end repeat
            return "not_found"
        on error errMsg
            return "error: " & errMsg
        end try
    end tell
    '''
    
    try:
        result = subprocess.run(
            ['osascript', '-e', applescript],
            capture_output=True,
            text=True,
            check=True
        )
        
        output = result.stdout.strip()
        
        if output == "success":
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{abs_path}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Finder Sidebar")
            return True
        elif output == "not_found":
            print(f"‚ÑπÔ∏è  –ü–∞–ø–∫–∞ '{abs_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Finder Sidebar")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AppleScript: {e}")
        return False


def list_sidebar_items():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Finder Sidebar
    """
    applescript = '''
    tell application "Finder"
        try
            set sidebarItems to every item of sidebar preferences
            set itemList to ""
            repeat with anItem in sidebarItems
                set itemList to itemList & (target of anItem as string) & "\\n"
            end repeat
            return itemList
        on error errMsg
            return "error: " & errMsg
        end try
    end tell
    '''
    
    try:
        result = subprocess.run(
            ['osascript', '-e', applescript],
            capture_output=True,
            text=True,
            check=True
        )
        
        output = result.stdout.strip()
        if output.startswith("error:"):
            print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
            return False
        
        print("üìÇ –¢–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Finder Sidebar:")
        for item in output.split('\n'):
            if item.strip():
                print(f"  ‚Ä¢ {item}")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AppleScript: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(
        description='CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Finder Sidebar –Ω–∞ macOS',
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s add "/Users/username/Documents/MyFolder"
  %(prog)s add "/Users/edcher/Applications/Chrome Apps.localized/Google –î–∏—Å–∫.app"
  %(prog)s remove "/Users/username/Documents/MyFolder"
  %(prog)s list
        ''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_parser = subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É –≤ Finder Sidebar')
    add_parser.add_argument('path', help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
    remove_parser = subparsers.add_parser('remove', help='–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –∏–∑ Finder Sidebar')
    remove_parser.add_argument('path', help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Sidebar')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ macOS
    if sys.platform != 'darwin':
        print("‚ùå –≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ macOS")
        return 1
    
    if args.command == 'add':
        success = add_to_finder_sidebar(args.path)
        return 0 if success else 1
    elif args.command == 'remove':
        success = remove_from_finder_sidebar(args.path)
        return 0 if success else 1
    elif args.command == 'list':
        success = list_sidebar_items()
        return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())
