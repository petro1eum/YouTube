#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
"""

import os
import json
import hashlib
from typing import Optional, Dict, List, Tuple
import logging

logger = logging.getLogger(__name__)

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ"""
    
    def __init__(self, cache_dir: str = "cache"):
        self.cache_dir = cache_dir
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)
    
    def get_video_hash(self, video_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ö—ç—à–∞
        stat = os.stat(video_path)
        hash_string = f"{video_path}_{stat.st_size}_{stat.st_mtime}"
        return hashlib.md5(hash_string.encode()).hexdigest()
    
    def get_cache_paths(self, video_path: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∫—ç—à–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        video_hash = self.get_video_hash(video_path)
        video_name = os.path.splitext(os.path.basename(video_path))[0]
        
        return {
            'audio': os.path.join(self.cache_dir, f"{video_hash}_audio.wav"),
            'transcript_segments': os.path.join(self.cache_dir, f"{video_hash}_transcript_segments.json"),
            'transcript_full': os.path.join(self.cache_dir, f"{video_hash}_transcript_full.txt"),
            'analysis': os.path.join(self.cache_dir, f"{video_hash}_analysis.json"),
            'screenshots': os.path.join(self.cache_dir, f"{video_hash}_screenshots"),
            'metadata': os.path.join(self.cache_dir, f"{video_hash}_metadata.json")
        }
    
    def save_metadata(self, video_path: str, metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        paths = self.get_cache_paths(video_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        metadata['created_at'] = os.path.getctime(video_path)
        metadata['processed_at'] = __import__('time').time()
        metadata['video_path'] = video_path
        metadata['video_name'] = os.path.splitext(os.path.basename(video_path))[0]
        
        with open(paths['metadata'], 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    def load_metadata(self, video_path: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        paths = self.get_cache_paths(video_path)
        
        if not os.path.exists(paths['metadata']):
            return None
        
        try:
            with open(paths['metadata'], 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def get_cached_audio(self, video_path: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ"""
        paths = self.get_cache_paths(video_path)
        
        if os.path.exists(paths['audio']):
            logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {paths['audio']}")
            return paths['audio']
        
        return None
    
    def save_audio_cache(self, video_path: str, audio_path: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –≤ –∫—ç—à"""
        paths = self.get_cache_paths(video_path)
        cache_audio_path = paths['audio']
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –∫—ç—à
        if audio_path != cache_audio_path:
            import shutil
            shutil.copy2(audio_path, cache_audio_path)
            logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {cache_audio_path}")
        
        return cache_audio_path
    
    def get_cached_transcript(self, video_path: str) -> Optional[Tuple[List[Dict], str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
        paths = self.get_cache_paths(video_path)
        
        if (os.path.exists(paths['transcript_segments']) and 
            os.path.exists(paths['transcript_full'])):
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
                with open(paths['transcript_segments'], 'r', encoding='utf-8') as f:
                    segments = json.load(f)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                with open(paths['transcript_full'], 'r', encoding='utf-8') as f:
                    full_text = f.read()
                
                logger.info(f"üìù –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return segments, full_text
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
                return None
        
        return None
    
    def save_transcript_cache(self, video_path: str, segments: List[Dict], full_text: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –∫—ç—à"""
        paths = self.get_cache_paths(video_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        with open(paths['transcript_segments'], 'w', encoding='utf-8') as f:
            json.dump(segments, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        with open(paths['transcript_full'], 'w', encoding='utf-8') as f:
            f.write(full_text)
        
        logger.info(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
    
    def get_cached_analysis(self, video_path: str, analysis_type: str = "basic") -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        paths = self.get_cache_paths(video_path)
        
        if os.path.exists(paths['analysis']):
            try:
                with open(paths['analysis'], 'r', encoding='utf-8') as f:
                    analysis_data = json.load(f)
                
                if analysis_type in analysis_data:
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{analysis_type}'")
                    return analysis_data[analysis_type]
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return None
    
    def save_analysis_cache(self, video_path: str, analysis: str, analysis_type: str = "basic"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ –∫—ç—à"""
        paths = self.get_cache_paths(video_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        analysis_data = {}
        if os.path.exists(paths['analysis']):
            try:
                with open(paths['analysis'], 'r', encoding='utf-8') as f:
                    analysis_data = json.load(f)
            except:
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_data[analysis_type] = analysis
        analysis_data[f"{analysis_type}_timestamp"] = __import__('time').time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(paths['analysis'], 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{analysis_type}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
    
    def get_cached_screenshots(self, video_path: str, mode: str) -> Optional[List]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
        paths = self.get_cache_paths(video_path)
        screenshots_info_file = os.path.join(paths['screenshots'], f"screenshots_{mode}.json")
        
        if os.path.exists(screenshots_info_file):
            try:
                with open(screenshots_info_file, 'r', encoding='utf-8') as f:
                    screenshots_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                all_exist = all(
                    os.path.exists(shot.get('path', '')) 
                    for shot in screenshots_data
                )
                
                if all_exist:
                    logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ä–µ–∂–∏–º–∞ '{mode}': {len(screenshots_data)} —Ñ–∞–π–ª–æ–≤")
                    return screenshots_data
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∫—ç—à –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {e}")
        
        return None
    
    def save_screenshots_cache(self, video_path: str, screenshots: List, mode: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö –≤ –∫—ç—à"""
        paths = self.get_cache_paths(video_path)
        
        if not os.path.exists(paths['screenshots']):
            os.makedirs(paths['screenshots'])
        
        screenshots_info_file = os.path.join(paths['screenshots'], f"screenshots_{mode}.json")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        screenshots_data = []
        for shot in screenshots:
            if isinstance(shot, dict):
                screenshots_data.append(shot)
            elif isinstance(shot, (list, tuple)) and len(shot) >= 3:
                screenshots_data.append({
                    'path': shot[0],
                    'timestamp': shot[1],
                    'description': shot[2] if len(shot) > 2 else '',
                    'reason': shot[3] if len(shot) > 3 else 'screenshot'
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        with open(screenshots_info_file, 'w', encoding='utf-8') as f:
            json.dump(screenshots_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö —Ä–µ–∂–∏–º–∞ '{mode}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à")
    
    def get_cache_status(self, video_path: str) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        paths = self.get_cache_paths(video_path)
        
        status = {
            'audio': os.path.exists(paths['audio']),
            'transcript': (os.path.exists(paths['transcript_segments']) and 
                          os.path.exists(paths['transcript_full'])),
            'analysis': os.path.exists(paths['analysis']),
            'screenshots': os.path.exists(paths['screenshots']),
            'metadata': os.path.exists(paths['metadata'])
        }
        
        return status
    
    def print_cache_status(self, video_path: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞"""
        status = self.get_cache_status(video_path)
        metadata = self.load_metadata(video_path)
        
        print(f"\nüóÉÔ∏è  –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –¥–ª—è –≤–∏–¥–µ–æ:")
        print(f"   üì± –ê—É–¥–∏–æ: {'‚úÖ' if status['audio'] else '‚ùå'}")
        print(f"   üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {'‚úÖ' if status['transcript'] else '‚ùå'}")
        print(f"   üìä –ê–Ω–∞–ª–∏–∑: {'‚úÖ' if status['analysis'] else '‚ùå'}")
        print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: {'‚úÖ' if status['screenshots'] else '‚ùå'}")
        
        if metadata:
            import time
            processed_time = time.strftime('%Y-%m-%d %H:%M:%S', 
                                         time.localtime(metadata.get('processed_at', 0)))
            print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {processed_time}")
            
            if 'whisper_model' in metadata:
                print(f"   ü§ñ –ú–æ–¥–µ–ª—å Whisper: {metadata['whisper_model']}")
            
            if 'screenshot_mode' in metadata:
                print(f"   üì∏ –†–µ–∂–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {metadata['screenshot_mode']}")
    
    def clear_cache(self, video_path: str):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        paths = self.get_cache_paths(video_path)
        
        import shutil
        for cache_type, path in paths.items():
            if os.path.exists(path):
                if os.path.isdir(path):
                    shutil.rmtree(path)
                else:
                    os.remove(path)
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –∫—ç—à: {cache_type}")
    
    def cleanup_old_cache(self, days: int = 7):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞"""
        import time
        cutoff_time = time.time() - (days * 24 * 60 * 60)
        
        removed_count = 0
        for filename in os.listdir(self.cache_dir):
            filepath = os.path.join(self.cache_dir, filename)
            if os.path.getmtime(filepath) < cutoff_time:
                if os.path.isdir(filepath):
                    import shutil
                    shutil.rmtree(filepath)
                else:
                    os.remove(filepath)
                removed_count += 1
        
        if removed_count > 0:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞") 