#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

import json
import os
import sys
from pprint import pprint
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from chronological_transcript_processor import ChronologicalTranscriptProcessor

def test_speaker_identification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    print("=" * 50)
    print("–¢–ï–°–¢ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    print("=" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ OpenAI")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    test_segments = [
        {
            "start": 0.0,
            "end": 11.0,
            "text": "–í–æ—Ç –µ—Å—Ç—å –∫—É–∏—Ç–æ–º, –≥–¥–µ —É –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ –≤–æ—Ç –æ–¥–Ω–∏–º –≤–∞–ª–æ–º –Ω–∞—Å—ã–ø–∞–Ω–Ω—É—é, –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –Ω–µ—Ç, –Ω–µ—Ç, –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å.",
            "duration": 11.0
        },
        {
            "start": 11.0,
            "end": 20.0,
            "text": "–ù–∞–≤–∞–ª–∏–Ω–∞ –≤—Å–µ –Ω–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –æ–¥–Ω–∏–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –µ—Å—Ç—å —Ç–∞–±–ª–∏—á–∫–∞. –î–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º —Ç–∞–∫–∂–µ –≤–∞–ª–æ–º –ù–∞–≤–∞–ª–∏–Ω–∞.",
            "duration": 9.0
        },
        {
            "start": 20.0,
            "end": 33.0,
            "text": "–ï—Å—Ç—å —Ç–∞–±–ª–∏—á–∫–∞ ActivitySN, ID, –∫–æ—Ç–æ—Ä—ã–º –≤—Å–µ —ç—Ç–æ –¥–µ–ª–æ —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è, —á–µ–º –º–Ω–µ —Ç–∞–∫–æ–µ —à–ª–∏ –±—ã —à–æ–∏.",
            "duration": 13.0
        }
    ]
    
    processor = ChronologicalTranscriptProcessor(api_key)
    
    try:
        speakers = processor.identify_speakers(test_segments)
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(speakers)}")
        for speaker_id, speaker in speakers.items():
            print(f"\n{speaker_id}:")
            print(f"  –ò–º—è: {speaker.name}")
            print(f"  –†–æ–ª—å: {speaker.role}")
            print(f"  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {speaker.characteristics}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö
        print("\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–∞–º:")
        for seg in test_segments[:3]:
            print(f"\n[{seg['start']:.1f}s] \"{seg['text'][:50]}...\"")
            print(f"  –ì–æ–≤–æ—Ä—è—â–∏–π: {seg.get('speaker_id', '–ù–ï –ù–ê–ó–ù–ê–ß–ï–ù')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def test_timeline_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏")
    print("=" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ OpenAI")
        return
        
    processor = ChronologicalTranscriptProcessor(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_segments = [
        {"start": 0.0, "text": "–ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏", "duration": 5.0},
        {"start": 5.0, "text": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã", "duration": 10.0}
    ]
    
    test_screenshots = [
        ("screenshot_001.jpg", 3.0, "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–ù–∞—á–∞–ª–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"),
        ("screenshot_002.jpg", 10.0, "–î–∏–∞–≥—Ä–∞–º–º–∞", "–ü–æ–∫–∞–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    ]
    
    try:
        timeline = processor.create_timeline(test_segments, test_screenshots)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(timeline)}")
        
        for event in timeline[:5]:
            print(f"\n{event.timestamp:.1f}s - {event.type}")
            if event.type == 'transcript':
                print(f"  –¢–µ–∫—Å—Ç: {event.content['text'][:50]}...")
            elif event.type == 'screenshot':
                print(f"  –°–∫—Ä–∏–Ω—à–æ—Ç: {event.content['path']}")
                print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {event.content['description']}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def test_full_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢ 3: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏")
    print("=" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ OpenAI")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cache_file = "results/–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ 09.07.2025 10-52-18 - –∑–∞–ø–∏—Å—å_analysis.json"
    if os.path.exists(cache_file):
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {cache_file}")
        with open(cache_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_segments = data['transcript_segments'][:20]
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_segments = [
            {"start": 0.0, "text": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω.", "duration": 3.0},
            {"start": 3.0, "text": "–°–µ–≥–æ–¥–Ω—è –º—ã –æ–±—Å—É–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.", "duration": 4.0},
            {"start": 7.0, "text": "–ú–∞—Ä–∏—è, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?", "duration": 3.0},
            {"start": 10.0, "text": "–î—É–º–∞—é, —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è, –ò–≤–∞–Ω.", "duration": 3.0},
            {"start": 13.0, "text": "–ù–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.", "duration": 2.0}
        ]
    
    test_screenshots = [
        ("screenshot_001.jpg", 5.0, "–°–ª–∞–π–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "–ü–æ–∫–∞–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"),
        ("screenshot_002.jpg", 12.0, "–î–∏–∞–≥—Ä–∞–º–º–∞", "–°—Ö–µ–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    ]
    
    video_context = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
        "duration": 60.0,
        "format": "webm"
    }
    
    processor = ChronologicalTranscriptProcessor(api_key)
    
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        result = processor.process_video_meeting(
            test_segments,
            test_screenshots,
            video_context
        )
        
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(result['speakers'])}")
        print(f"–°–æ–±—ã—Ç–∏–π –Ω–∞ timeline: {len(result['timeline'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç
        if 'report' in result:
            print("\nüìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç:")
            print(result['report'][:500] + "...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open("test_chronological_output.md", "w", encoding="utf-8") as f:
                f.write(result['report'])
            print("\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_chronological_output.md")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def analyze_problem():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Ç–µ–∫—Å—Ç–æ–º"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å '–†–æ–º–∞–Ω—É.'")
    print("=" * 50)
    
    problem_file = "results/–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ 09.07.2025 10-52-18 - –∑–∞–ø–∏—Å—å_INTEGRATED_chronological.md"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º grep –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
    print("\nüîç –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '–†–æ–º–∞–Ω—É.'...")
    os.system(f"grep -c '–†–æ–º–∞–Ω—É\\.' \"{problem_file}\" | head -1")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...")
    os.system(f"head -n 50 \"{problem_file}\" | grep -E '(##|–£—á–∞—Å—Ç–Ω–∏–∫–∏|speaker)'")

if __name__ == "__main__":
    print("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –•–†–û–ù–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_speaker_identification()
    test_timeline_creation()
    test_full_processing()
    analyze_problem()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 