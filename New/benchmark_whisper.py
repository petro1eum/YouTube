#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Whisper –Ω–∞ M1 Max
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import time
import whisper
import torch
import numpy as np
import importlib.util
spec = importlib.util.spec_from_file_location("updated_video_analyzer", "updated-video-analyzer.py")
updated_video_analyzer = importlib.util.module_from_spec(spec)
spec.loader.exec_module(updated_video_analyzer)
get_optimal_device = updated_video_analyzer.get_optimal_device
load_whisper_optimized = updated_video_analyzer.load_whisper_optimized

def benchmark_whisper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper"""
    
    print("üèÉ –ë–µ–Ω—á–º–∞—Ä–∫ Whisper –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ (30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞)
    test_audio = np.zeros(16000 * 30, dtype=np.float32)  # 30 —Å–µ–∫—É–Ω–¥
    test_file = "temp_benchmark.wav"
    
    import soundfile as sf
    sf.write(test_file, test_audio, 16000)
    
    models_to_test = ["tiny", "base", "small"]
    results = {}
    
    for model_size in models_to_test:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_size}")
        
        # –¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        start_time = time.time()
        model, device = load_whisper_optimized(model_size)
        load_time = time.time() - start_time
        
        # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
        print("   –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏...")
        _ = model.transcribe(test_file, language="ru", fp16=(device != "cpu"))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        print("   –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...")
        start_time = time.time()
        for i in range(3):
            result = model.transcribe(
                test_file, 
                language="ru", 
                fp16=(device != "cpu"),
                temperature=0.0,
                beam_size=5
            )
        
        avg_time = (time.time() - start_time) / 3
        
        results[model_size] = {
            "load_time": load_time,
            "transcribe_time": avg_time,
            "real_time_factor": 30.0 / avg_time  # –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        }
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞: {load_time:.2f}—Å")
        print(f"   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è 30—Å –∞—É–¥–∏–æ: {avg_time:.2f}—Å")
        print(f"   ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å: {results[model_size]['real_time_factor']:.1f}x —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        del model
        if device == "mps" or device == "cuda":
            torch.cuda.empty_cache() if device == "cuda" else None
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.unlink(test_file)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 50)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –¥–ª—è –≤–∞—à–µ–≥–æ M1 Max:")
    print()
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    best_model = None
    best_rtf = 0
    
    for model, stats in results.items():
        if stats['real_time_factor'] > best_rtf and stats['real_time_factor'] > 5:
            best_model = model
            best_rtf = stats['real_time_factor']
    
    if best_model:
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best_model}")
        print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {best_rtf:.1f}x —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        print(f"   - –ß–∞—Å –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∑–∞ ~{60/best_rtf:.1f} –º–∏–Ω—É—Ç")
    
    print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ —É—Å–∫–æ—Ä–µ–Ω–∏—é:")
    print("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å 'base' –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞/—Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("   2. –ú–æ–¥–µ–ª—å 'large' —Ä–∞–±–æ—Ç–∞–µ—Ç –û–ß–ï–ù–¨ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞ CPU")
    print("   3. –í–∫–ª—é—á–∏—Ç–µ fp16=True –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ 20-30%")
    print("   4. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --clean-transcript")
    
    return results

if __name__ == "__main__":
    benchmark_whisper() 