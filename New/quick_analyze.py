#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
import sys
import argparse
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(
        description='–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á–∏ —Å –ò–ò',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s video.mp4                    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
  %(prog)s video.mp4 --full             # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π
  %(prog)s video.mp4 --fast             # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (tiny –º–æ–¥–µ–ª—å)
  %(prog)s folder/                      # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ
        """
    )
    
    parser.add_argument('input', help='–ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ')
    parser.add_argument('--full', action='store_true', 
                       help='–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ—Ç—á–µ—Ç–æ–º')
    parser.add_argument('--fast', action='store_true', 
                       help='–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (tiny whisper –º–æ–¥–µ–ª—å)')
    parser.add_argument('--economical', action='store_true',
                       help='–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º API –≤—ã–∑–æ–≤–æ–≤)')
    parser.add_argument('--output', default='results', 
                       help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞:")
        print("OPENAI_API_KEY=your_api_key_here")
        sys.exit(1)
    
    input_path = Path(args.input)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    video_files = []
    if input_path.is_file():
        video_files = [input_path]
    elif input_path.is_dir():
        # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        video_extensions = {'.mp4', '.avi', '.mov', '.webm', '.mkv', '.flv'}
        video_files = [f for f in input_path.iterdir() 
                      if f.suffix.lower() in video_extensions]
        if not video_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
            sys.exit(1)
    else:
        print(f"‚ùå –ü—É—Ç—å {input_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
    if args.fast:
        whisper_model = "tiny"
        screenshot_mode = "periodic"
        chronological = False
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: tiny –º–æ–¥–µ–ª—å, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã")
    elif args.economical:
        whisper_model = "tiny"
        screenshot_mode = "periodic"
        chronological = False
        print("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–µ–∂–∏–º: –º–∏–Ω–∏–º—É–º API –≤—ã–∑–æ–≤–æ–≤, ~$1-3 –∑–∞ —á–∞—Å –≤–∏–¥–µ–æ")
    elif args.full:
        whisper_model = "base"
        screenshot_mode = "smart"
        chronological = True
        print("üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: base –º–æ–¥–µ–ª—å, —É–º–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è (~$15-25 –∑–∞ —á–∞—Å)")
    else:
        whisper_model = "base"
        screenshot_mode = "smart"
        chronological = False
        print("ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: base –º–æ–¥–µ–ª—å, —É–º–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (~$8-12 –∑–∞ —á–∞—Å)")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, video_file in enumerate(video_files, 1):
        print(f"\n{'='*60}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(video_files)}: {video_file.name}")
        print('='*60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            sys.executable,
            "updated-video-analyzer.py",
            str(video_file),
            "--whisper-model", whisper_model,
            "--screenshot-mode", screenshot_mode,
            "--output", args.output
        ]
        
        if chronological:
            cmd.append("--chronological")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        import subprocess
        result = subprocess.run(cmd)
        
        if result.returncode != 0:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_file.name}")
        else:
            print(f"‚úÖ {video_file.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    print(f"\n{'='*60}")
    print(f"‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}/")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    if len(video_files) > 1:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")

if __name__ == "__main__":
    main()
